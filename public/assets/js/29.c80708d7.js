(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{571:function(t,s,a){"use strict";a.r(s);var v=a(2),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"_1、箭头函数和普通函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、箭头函数和普通函数的区别"}},[t._v("#")]),t._v(" 1、箭头函数和普通函数的区别")]),t._v(" "),a("ol",[a("li",[t._v("箭头函数和普通函数的样式不同，箭头函数的语法更加简洁、清晰，箭头函数是"),a("code",[t._v("=>")]),t._v("定义函数，普通函数是"),a("code",[t._v("function")]),t._v("定义函数")]),t._v(" "),a("li",[t._v("箭头函数不能作为构造函数使用，也不能使用"),a("code",[t._v("new")]),t._v("关键字（```因为箭头函数中没有自己的this,它的this其实是继承了外层执行环境的this,且this指向是永远不会改变的，作为构造函数其他this要指向创建的新对象）")]),t._v(" "),a("li",[t._v("箭头函数的"),a("code",[t._v("this")]),t._v("是捕获它所在执行上下文的"),a("code",[t._v("this")]),t._v("来作为自己的this,定义的时候就确定了")]),t._v(" "),a("li",[t._v("箭头函数的"),a("code",[t._v("this")]),t._v("指向不会被"),a("code",[t._v("bind, call, apply")]),t._v("改变")]),t._v(" "),a("li",[t._v("箭头函数是没有自己的"),a("code",[t._v("arg")]),t._v("的。如果要访问则会得到外层函数执行的值。")]),t._v(" "),a("li",[t._v("箭头函数中没有"),a("code",[t._v("prototype")]),t._v("原型")])]),t._v(" "),a("h2",{attrs:{id:"_2、let、const、var这三者的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、let、const、var这三者的区别"}},[t._v("#")]),t._v(" 2、let、const、var这三者的区别")]),t._v(" "),a("p",[a("strong",[t._v("变量提升:")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("var")]),t._v("声明的变量存在变量提升（变量可以在声明前调用，值为"),a("code",[t._v("undefined")]),t._v("）")]),t._v(" "),a("li",[a("code",[t._v("let")]),t._v("和"),a("code",[t._v("const")]),t._v("不存在变量提升问题（因为let和const都有一个暂时性死区的概念，所以在没有得到赋值前是不能被调用的）\n"),a("strong",[t._v("块级作用域：")]),t._v(" "),a("code",[t._v("var")]),t._v("不存在块级作用域，"),a("code",[t._v("let")]),t._v("和"),a("code",[t._v("const")]),t._v("存在块级作用域\n"),a("strong",[t._v("声明：")]),t._v(" "),a("code",[t._v("var")]),t._v("允许重复声明，"),a("code",[t._v("let")]),t._v("和"),a("code",[t._v("const")]),t._v("在同一作用域下不允许重复声明变量。"),a("code",[t._v("const")]),t._v("声明的是一个只读的常量，所以声明后就不能改变（如果声明的是一个对象，对象里的属性时可以改变的，因为"),a("code",[t._v("const")]),t._v("声明的对象只保存对象的引用地址，只要地址不发生改变，那么就不会报错）")])]),t._v(" "),a("h2",{attrs:{id:"_3、bigint和number的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、bigint和number的区别"}},[t._v("#")]),t._v(" 3、Bigint和Number的区别")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("Number")]),t._v("类型的数字有精度限制，数值的精度只能到53个二进制，大于这个范围的整数就无法精确表示了")]),t._v(" "),a("li",[a("code",[t._v("Bigint")]),t._v("没有位数限制，任何位数的整数都可以精确表示。但是只能用于表示整数，为了和"),a("code",[t._v("Number")]),t._v("区分，"),a("code",[t._v("Bigint")]),t._v("类型的数据后面必须加后缀"),a("code",[t._v("n")]),t._v("。"),a("code",[t._v("Bigint")]),t._v("可以使用负号却不能使用正号。")]),t._v(" "),a("li",[t._v("二者类型的数据不能或者计算")])]),t._v(" "),a("h2",{attrs:{id:"_4、基本数据类型和引用数据类型的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、基本数据类型和引用数据类型的区别"}},[t._v("#")]),t._v(" 4、基本数据类型和引用数据类型的区别")]),t._v(" "),a("p",[a("strong",[t._v("基本数据类型：")])]),t._v(" "),a("ol",[a("li",[t._v("基本数据类型的值是不可变的（重新赋值属于改变属性名指向，而不是对值进行操作）")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nstr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// abc")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("基本数据类型不可以添加属性和方法")]),t._v(" "),a("li",[t._v("基本数据类型的赋值是简单赋值，基本数据类型的比较是值的比较")]),t._v(" "),a("li",[t._v("基本数据类型的存放在"),a("code",[t._v("栈")]),t._v("里面的")])]),t._v(" "),a("p",[a("strong",[t._v("引用数据类型：")])]),t._v(" "),a("ol",[a("li",[t._v("引用数据类型的值是可以改变的")]),t._v(" "),a("li",[t._v("引用类型可以添加属性和方法")]),t._v(" "),a("li",[t._v("引用类型的赋值是对象引用，即声明的变量标识符，存储的只是对象的指针地址")]),t._v(" "),a("li",[t._v("引用类型的比较是引用"),a("code",[t._v("指针地址")]),t._v("的比较")]),t._v(" "),a("li",[t._v("引用类型是同时保存在"),a("code",[t._v("栈")]),t._v("和"),a("code",[t._v("堆")]),t._v("中的，栈中保存变量标识符和指向堆的地址")])]),t._v(" "),a("h2",{attrs:{id:"_5、async-await对比promise的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、async-await对比promise的优缺点"}},[t._v("#")]),t._v(" 5、async await对比promise的优缺点")]),t._v(" "),a("p",[a("strong",[t._v("async/await优点：")])]),t._v(" "),a("ol",[a("li",[t._v("他做到了真正的串行的同步写法，代码阅读相对容易")]),t._v(" "),a("li",[t._v("对于条件语句和其他流程语句比较友好，可以直接写到判断条件里面")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("222")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2222")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("222")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yes, it is!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 会打印")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("处理复杂流程是，在代码清晰度方面有优势")])]),t._v(" "),a("p",[a("strong",[t._v("async/await缺点：")])]),t._v(" "),a("ol",[a("li",[t._v("无法处理"),a("code",[t._v("promise")]),t._v("返回的"),a("code",[t._v("reject")]),t._v("对象，要借助"),a("code",[t._v("try...catch")])]),t._v(" "),a("li",[t._v("用"),a("code",[t._v("await")]),t._v("可能会导致性能问题，因为"),a("code",[t._v("await")]),t._v("会阻塞代码，也许之后的异步代码并不依赖于前者，但仍然需要等待前者完成，导致代码失去了并发性")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Promise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("all")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("try...catch")]),t._v("内部的变量无法传递给下一个"),a("code",[t._v("try...catch")]),t._v("，"),a("code",[t._v("Promise")]),t._v("和"),a("code",[t._v("then/catch")]),t._v("内部定义的变量，能通过"),a("code",[t._v("then")]),t._v("联调的参数传递到下一个"),a("code",[t._v("then/catch")]),t._v("，但是"),a("code",[t._v("async/await")]),t._v("的"),a("code",[t._v("try")]),t._v("内部的变量，\n如果用"),a("code",[t._v("let")]),t._v("和"),a("code",[t._v("const")]),t._v("定义则无法传递到下一个"),a("code",[t._v("try...catch")]),t._v("，只能在外层作用域先定义好。")])]),t._v(" "),a("p",[t._v("但是呢。"),a("code",[t._v("async/await")]),t._v("确实解决了"),a("code",[t._v("promise")]),t._v("一些问题的，更加灵活的处理异步")]),t._v(" "),a("p",[a("strong",[t._v("promise的一些问题：")])]),t._v(" "),a("ul",[a("li",[t._v("执行的过程中，中途不能取消，链式调用多个"),a("code",[t._v("then")]),t._v("中间不能随便跳出来")]),t._v(" "),a("li",[t._v("错误无法在外部被捕捉，只能在内部进行预判处理，如果不设置回调函数，"),a("code",[t._v("promise")]),t._v("内部抛出的错误不会再外部被发现")]),t._v(" "),a("li",[a("code",[t._v("promise")]),t._v("内部如何执行，监测起来很难，当处于"),a("code",[t._v("pending")]),t._v("状态时，无法得知目前进展到哪一个阶段")])]),t._v(" "),a("h2",{attrs:{id:"_6、get和post的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、get和post的区别"}},[t._v("#")]),t._v(" 6、get和post的区别")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("GET")]),t._v("是将参数写在"),a("code",[t._v("url中?")]),t._v("后面，并且用"),a("code",[t._v("&")]),t._v("分割不同的参数；而"),a("code",[t._v("POST")]),t._v("是将信息存放在"),a("code",[t._v("Message Body")]),t._v("中传送，参数不会显示在"),a("code",[t._v("URL")]),t._v("中(Restful规范中是这样，但post在有需要时可以把参数放在"),a("code",[t._v("url")]),t._v("中)。 "),a("code",[t._v("GET")]),t._v("方式需要使用"),a("code",[t._v("Request.QueryString")]),t._v("来取得变量的值，而"),a("code",[t._v("POST")]),t._v("方式通过"),a("code",[t._v("Request.Form")]),t._v("来获取变量的值。也就是说"),a("code",[t._v("GET")]),t._v("是通过地址栏来传值，而"),a("code",[t._v("POST")]),t._v("是通过提交表单来传值。")]),t._v(" "),a("li",[a("code",[t._v("GET")]),t._v("请求提交的数据长度限制（HTTP协议本身没有限制url及正文长度，对url的限制大多是浏览器和服务器的问题），"),a("code",[t._v("POST")]),t._v("请求没有内容长度限制。")]),t._v(" "),a("li",[a("code",[t._v("GET")]),t._v("请求会被浏览器缓存起来。而每次提交"),a("code",[t._v("POST")]),t._v("请求，浏览器不会缓存"),a("code",[t._v("post")]),t._v("请求返回的内容")]),t._v(" "),a("li",[a("code",[t._v("GET")]),t._v("对数据进行查询，"),a("code",[t._v("POST")]),t._v("主要对数据进行增删改！说白了就是get只读，post是写。")]),t._v(" "),a("li",[t._v("之前一直说get请求不安全post请求安全是因为，"),a("code",[t._v("GET")]),t._v("请求方式是从浏览器的"),a("code",[t._v("URL")]),t._v("地址就可以看到参数，所以不安全。其实无论是"),a("code",[t._v("GET")]),t._v("还是"),a("code",[t._v("POST")]),t._v("其实都是不安全的，因为"),a("code",[t._v("http")]),t._v("协议是明文传输，只要拦截封包就能轻易获取到重要内容。想要安全传输资料。必须使用"),a("code",[t._v("SSL/TLS")]),t._v("来加密封包，也就是"),a("code",[t._v("HTTPS")])])]),t._v(" "),a("p",[a("strong",[t._v("为什么推崇使用post来处理敏感数据呢")]),t._v("\n因为"),a("code",[t._v("GET")]),t._v("请求记录会保存在浏览器，上网日志中，而是用"),a("code",[t._v("POST")]),t._v("不会被记录存储在浏览器的记录和网址访问记录中，这样会有更大的安全性")]),t._v(" "),a("p",[a("strong",[t._v("误区：说GET产生一个TCP数据包；POST产生两个TCP数据包")])]),t._v(" "),a("ul",[a("li",[t._v("对于"),a("code",[t._v("GET")]),t._v("方式的请求，浏览器会把"),a("code",[t._v("http header")]),t._v("和"),a("code",[t._v("data")]),t._v("一并发送出去，服务端响应"),a("code",[t._v("200")]),t._v("，请求成功。")]),t._v(" "),a("li",[t._v("对于"),a("code",[t._v("POST")]),t._v("方式的请求，浏览器会把"),a("code",[t._v("http header")]),t._v("给服务daunt，告诉服务端等下会有数据过来，服务端响应"),a("code",[t._v("100 continue")]),t._v("，告诉浏览器我已经准备接收数据，浏览区再post发送一个"),a("code",[t._v("data")]),t._v("给服务端，服务端形影"),a("code",[t._v("200")]),t._v("，请求成功。")])]),t._v(" "),a("p",[t._v("面所说的post会比get多一个tcp包其实不太严谨。多发的那个expect 100 continue header报文，是"),a("code",[t._v("由客户端对http的post和get的请求策略决定的")]),t._v("，目的是为了避免浪费资源，如带宽，数据传输消耗的时间等等。所以客户端会在发送header的时候添加expect 100去探探路，如果失败了就不用继续发送data，从而减少了资源的浪费。所以是否再发送一个包取决了客户端的实现策略，和get/post并没什么关系。有的客户端比如fireFox就只发送一个包。")]),t._v(" "),a("h2",{attrs:{id:"_7、fetch、ajax、axios区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、fetch、ajax、axios区别"}},[t._v("#")]),t._v(" 7、fetch、ajax、axios区别")]),t._v(" "),a("p",[t._v("Ajax是什么：ajax是（Asynchronous JavaScript and XML）的缩写。现在，允许浏览器与服务器通信而无须刷新当前页面的技术都被叫做ajax。核心是用"),a("code",[t._v("XMLHttpRequest")]),t._v("对象。")]),t._v(" "),a("p",[t._v("axios是什么：axios是一个基于"),a("code",[t._v("promise")]),t._v("用于浏览器和"),a("code",[t._v("nodejs")]),t._v("的"),a("code",[t._v("HTTP")]),t._v("客户端，本质上"),a("code",[t._v("也是对原生XHR")]),t._v("的封装，只不过她是promise的实现版本，符合新的es规范")]),t._v(" "),a("p",[t._v("fetch是什么： fetch被称为下一代的"),a("code",[t._v("ajax")]),t._v("技术，采用promise方式来处理数据，是一种简洁明了的API，比XMLHttpRequest更加简单易用。")]),t._v(" "),a("p",[t._v("所以其主要区别是：axios、fetch请求后都支持promise对象API，ajax只能用回调函数。")]),t._v(" "),a("h2",{attrs:{id:"tcp的udp的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp的udp的区别"}},[t._v("#")]),t._v(" TCP的UDP的区别")]),t._v(" "),a("ul",[a("li",[t._v("TCP是面向连接的，udp是无法连接的及发送数据前不需要简历链接")]),t._v(" "),a("li",[t._v("TCP提供可靠的服务。也就是说，通过"),a("code",[t._v("TCP")]),t._v("连接传送的数据，无差错哦，不丢失，不重复，且按需到达；UDP尽最大努力交付，即不保证可靠交付。并且因为tcp可靠，面向连接，不会丢失数据因此适合大数据量的交换。")]),t._v(" "),a("li",[t._v("TCP是面向字节流，UDP面向保温，并且网络出现拥塞不会使得发送速率降低")]),t._v(" "),a("li",[t._v("TCP只能是1对1的，而UDP支持1对1，1对多。")]),t._v(" "),a("li",[t._v("TCP的首部较大为20字节，而UDP只有8字节。")]),t._v(" "),a("li",[t._v("TCP是面向连接的可靠性传输，而UDP是不可靠的。")])]),t._v(" "),a("h2",{attrs:{id:"bind-call-apply区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind-call-apply区别"}},[t._v("#")]),t._v(" bind call apply区别")]),t._v(" "),a("ul",[a("li",[t._v("三者都可以改变函数的"),a("code",[t._v("this")]),t._v("对象指向")]),t._v(" "),a("li",[t._v("三者第一个参数都是"),a("code",[t._v("this")]),t._v("要指向的对象，如果没有这个参数或参数为"),a("code",[t._v("undefined")]),t._v("或"),a("code",[t._v("null")]),t._v("，则默认指向全局"),a("code",[t._v("window")]),t._v("。")]),t._v(" "),a("li",[t._v("三者都可以传参，但是apply是数据，而call是参数列表，且apply是call是一次性传入参数，而"),a("code",[t._v("bind")]),t._v("可以分为多次传入。")]),t._v(" "),a("li",[t._v("bind改变this指向后不会立即执行，而是返回一个永久改变this指向的函数便于稍后调用；apply和call则是立即调用。")])]),t._v(" "),a("h2",{attrs:{id:"_8、javascript和typescript的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8、javascript和typescript的区别"}},[t._v("#")]),t._v(" 8、JavaScript和typeScript的区别")]),t._v(" "),a("ol",[a("li",[t._v("TypeScript从核心语言方面和类概念的模塑方面对"),a("code",[t._v("JavaScript")]),t._v("对象模型进行扩展。")]),t._v(" "),a("li",[t._v("JavaScript代码可以在无需任何修改的情况下与"),a("code",[t._v("TypeScript")]),t._v("一同工作，同时可以使用编译器将"),a("code",[t._v("TypeScript")]),t._v("代码转换为"),a("code",[t._v("JavaScript")]),t._v("。")]),t._v(" "),a("li",[t._v("TypeScript通过类型注解提供编译时的静态类型检查。")]),t._v(" "),a("li",[t._v("TypeScript中的数据要求带有明确的类型，JavaScript不要求。")]),t._v(" "),a("li",[t._v("TypeScript为函数提供了缺省参数值")]),t._v(" "),a("li",[t._v("TypeScript引入了JavaScript中没有的"),a("code",[t._v("类")]),t._v("概念")]),t._v(" "),a("li",[t._v("TypeScript中引入了模块的概念，可以吧声明、数据、函数和类封装在模块中")])])])}),[],!1,null,null,null);s.default=_.exports}}]);