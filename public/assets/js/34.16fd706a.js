(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{577:function(t,s,a){"use strict";a.r(s);var n=a(2),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"js中的事件循环机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的事件循环机制"}},[t._v("#")]),t._v(" js中的事件循环机制")]),t._v(" "),a("h4",{attrs:{id:"进程、线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程、线程"}},[t._v("#")]),t._v(" 进程、线程")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("进程是系统分配的独立资源，是 CPU 资源分配的基本单位，进程是由一个或者多个线程组成的。")])]),t._v(" "),a("li",[a("p",[t._v("线程是进程的执行流，是CPU调度和分派的基本单位，同个进程之中的多个线程之间是共享该进程的资源的。")])])]),t._v(" "),a("h3",{attrs:{id:"浏览器内核"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器内核"}},[t._v("#")]),t._v(" 浏览器内核")]),t._v(" "),a("p",[t._v("浏览器是多进程的，浏览器每一个 tab 标签都代表一个独立的进程（也不一定，因为多个空白 tab 标签会合并成一个进程），浏览器内核（浏览器渲染进程）属于浏览器多进程中的一种。")]),t._v(" "),a("p",[t._v("浏览器内核有多种线程在工作。")]),t._v(" "),a("h4",{attrs:{id:"gui-渲染线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gui-渲染线程"}},[t._v("#")]),t._v(" GUI 渲染线程:")]),t._v(" "),a("p",[t._v("负责渲染页面，解析 HTML，CSS 构成 DOM 树等，当页面重绘或者由于某种操作引起回流都会调起该线程。\n和 JS 引擎线程是互斥的，当 JS 引擎线程在工作的时候，GUI 渲染线程会被挂起，GUI 更新被放入在 JS 任务队列中，等待 JS 引擎线程空闲的时候继续执行。")]),t._v(" "),a("h4",{attrs:{id:"js-引擎线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-引擎线程"}},[t._v("#")]),t._v(" JS 引擎线程:")]),t._v(" "),a("p",[t._v("单线程工作，负责解析运行 JavaScript 脚本。\n和 GUI 渲染线程互斥，JS 运行耗时过长就会导致页面阻塞。\n事件触发线程:")]),t._v(" "),a("p",[t._v("当事件符合触发条件被触发时，该线程会把对应的事件回调函数添加到任务队列的队尾，等待 JS 引擎处理。")]),t._v(" "),a("h4",{attrs:{id:"定时器触发线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器触发线程"}},[t._v("#")]),t._v(" 定时器触发线程:")]),t._v(" "),a("p",[t._v("浏览器定时计数器并不是由 JS 引擎计数的，阻塞会导致计时不准确。\n开启定时器触发线程来计时并触发计时，计时完成后会被添加到任务队列中，等待 JS 引擎处理。")]),t._v(" "),a("h4",{attrs:{id:"http-请求线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-请求线程"}},[t._v("#")]),t._v(" http 请求线程:")]),t._v(" "),a("p",[t._v("http 请求的时候会开启一条请求线程。\n请求完成有结果了之后，将请求的回调函数添加到任务队列中，等待 JS 引擎处理。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/3/1645bc78ff44b314?w=287&h=577&f=png&s=23011",alt:"image.pnh"}})]),t._v(" "),a("h3",{attrs:{id:"javascript-引擎是单线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-引擎是单线程"}},[t._v("#")]),t._v(" JavaScript 引擎是单线程")]),t._v(" "),a("p",[t._v("JavaScript 引擎是单线程，也就是说每次只能执行一项任务，其他任务都得按照顺序排队等待被执行，只有当前的任务执行完成之后才会往下执行下一个任务。\nHTML5 中提出了 Web-Worker API，主要是为了解决页面阻塞问题，但是并没有改变 JavaScript 是单线程的本质")]),t._v(" "),a("h3",{attrs:{id:"javascript-事件循环机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-事件循环机制"}},[t._v("#")]),t._v(" JavaScript 事件循环机制")]),t._v(" "),a("p",[t._v("JavaScript 事件循环机制分为浏览器和 Node 事件循环机制，两者的实现技术不一样，浏览器 Event Loop 是 HTML 中定义的规范，Node Event Loop 是由 libuv 库实现。这里主要讲的是浏览器部分。")]),t._v(" "),a("p",[t._v("Javascript 有一个 main thread 主线程和 call-stack 调用栈(执行栈)，所有的任务都会被放到调用栈等待主线程执行。")]),t._v(" "),a("h4",{attrs:{id:"js-调用栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-调用栈"}},[t._v("#")]),t._v(" JS 调用栈")]),t._v(" "),a("p",[t._v("JS 调用栈是一种后进先出的数据结构。当函数被调用时，会被添加到栈中的顶部，执行完成之后就从栈顶部移出该函数，直到栈内被清空。")]),t._v(" "),a("h4",{attrs:{id:"同步任务、异步任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步任务、异步任务"}},[t._v("#")]),t._v(" 同步任务、异步任务")]),t._v(" "),a("p",[t._v("JavaScript 单线程中的任务分为同步任务和异步任务。同步任务会在调用栈中按照顺序排队等待主线程执行，异步任务则会在异步有了结果后将注册的回调函数添加到任务队列(消息队列)中等待主线程空闲的时候，也就是栈内被清空的时候，被读取到栈中等待主线程执行。任务队列是先进先出的数据结构。")]),t._v(" "),a("h4",{attrs:{id:"event-loop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-loop"}},[t._v("#")]),t._v(" Event Loop")]),t._v(" "),a("p",[t._v("调用栈中的同步任务都执行完毕，栈内被清空了，就代表主线程空闲了，这个时候就会去任务队列中按照顺序读取一个任务放入到栈中执行。每次栈内被清空，都会去读取任务队列有没有任务，有就读取执行，一直循环读取-执行的操作，就形成了事件循环。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/3/1645bc78ffad47d7?w=636&h=518&f=png&s=27798",alt:"img.png"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/3/1645bc78ff90482b?w=1148&h=960&f=png&s=281358",alt:"img_1.png"}})]),t._v(" "),a("h4",{attrs:{id:"定时器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[t._v("#")]),t._v(" 定时器")]),t._v(" "),a("p",[t._v("定时器会开启一条定时器触发线程来触发计时，定时器会在等待了指定的时间后将事件放入到任务队列中等待读取到主线程执行。")]),t._v(" "),a("p",[t._v("定时器指定的延时毫秒数其实并不准确，因为定时器只是在到了指定的时间时将事件放入到任务队列中，必须要等到同步的任务和现有的任务队列中的事件全部执行完成之后，才会去读取定时器的事件到主线程执行，中间可能会存在耗时比较久的任务，那么就不可能保证在指定的时间执行。")]),t._v(" "),a("h4",{attrs:{id:"宏任务-macro-task-、微任务-micro-task"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#宏任务-macro-task-、微任务-micro-task"}},[t._v("#")]),t._v(" 宏任务(macro-task)、微任务(micro-task)")]),t._v(" "),a("p",[t._v("除了广义的同步任务和异步任务，JavaScript 单线程中的任务可以细分为宏任务和微任务。")]),t._v(" "),a("p",[t._v("macro-task包括：script(整体代码), "),a("code",[t._v("setTimeout, setInterval, setImmediate, I/O, UI rendering")]),t._v("。")]),t._v(" "),a("p",[t._v("micro-task包括："),a("code",[t._v("process.nextTick, Promises, Object.observe, MutationObserver")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\npromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[t._v("示例中，"),a("code",[t._v("setTimeout")]),t._v(" 和 "),a("code",[t._v("Promise")]),t._v("被称为任务源，来自不同的任务源注册的回调函数会被放入到不同的任务队列中。")]),t._v(" "),a("p",[t._v("有了宏任务和微任务的概念后，那 JS 的执行顺序是怎样的？是宏任务先还是微任务先？")]),t._v(" "),a("p",[t._v("第一次事件循环中，JavaScript 引擎会把整个 script 代码当成一个宏任务执行，执行完成之后，再检测本次循环中是否寻在微任务，存在的话就依次从微任务的任务队列中读取执行完所有的微任务，再读取宏任务的任务队列中的任务执行，再执行所有的微任务，如此循环。JS 的执行顺序就是每次事件循环中的宏任务-微任务。")]),t._v(" "),a("p",[t._v("上面的示例中，第一次事件循环，整段代码作为宏任务进入主线程执行。\n遇到了 setTimeout ，就会等到过了指定的时间后将回调函数放入到宏任务的任务队列中。\n遇到 Promise，将 then 函数放入到微任务的任务队列中。\n整个事件循环完成之后，会去检测微任务的任务队列中是否存在任务，存在就执行。\n第一次的循环结果打印为: 1,3,5,4。\n接着再到宏任务的任务队列中按顺序取出一个宏任务到栈中让主线程执行，那么在这次循环中的宏任务就是 setTimeout 注册的回调函数，执行完这个回调函数，发现在这次循环中并不存在微任务，就准备进行下一次事件循环。\n检测到宏任务队列中已经没有了要执行的任务，那么就结束事件循环。\n最终的结果就是 1,3,5,4,2。")]),t._v(" "),a("h3",{attrs:{id:"js中微任务和宏任务的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中微任务和宏任务的区别"}},[t._v("#")]),t._v(" js中微任务和宏任务的区别")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("宏任务：当前调用栈中执行的代码成为宏任务。（主代码快，定时器等等）。")])]),t._v(" "),a("li",[a("p",[t._v("微任务： 当前（此次事件循环中）宏任务执行完，在下一个宏任务开始之前需要执行的任务,可以理解为回调事件。（promise.then，proness.nextTick等等）。")])]),t._v(" "),a("li",[a("p",[t._v("宏任务中的事件放在callback queue中，由事件触发线程维护；微任务的事件放在微任务队列中，由js引擎线程维护。")])])]),t._v(" "),a("h4",{attrs:{id:"运行机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行机制"}},[t._v("#")]),t._v(" 运行机制")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("在执行栈中执行一个宏任务。")])]),t._v(" "),a("li",[a("p",[t._v("执行过程中遇到微任务，将微任务添加到微任务队列中。")])]),t._v(" "),a("li",[a("p",[t._v("当前宏任务执行完毕，立即执行微任务队列中的任务。")])]),t._v(" "),a("li",[a("p",[t._v("当前微任务队列中的任务执行完毕，检查渲染，GUI线程接管渲染。")])]),t._v(" "),a("li",[a("p",[t._v("渲染完毕后，js线程接管，开启下一次事件循环，执行下一次宏任务（事件队列中取）。")])])]),t._v(" "),a("p",[t._v("微任务：process.nextTick、MutationObserver、Promise.then catch finally")]),t._v(" "),a("p",[t._v("宏任务：I/O、setTimeout、setInterval、setImmediate、requestAnimationFrame")])])}),[],!1,null,null,null);s.default=r.exports}}]);